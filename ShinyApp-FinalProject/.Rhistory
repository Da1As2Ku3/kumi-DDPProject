library(datasets)
data(LungCapData)
LungCapData <- read.delim("C:/Users/kumi/Desktop/coursera file/lungcapdata/LungCapData.txt")
View(LungCapData)
#Numeric to categorical cata
library(LungCapData)
LungCapData <- read.csv("C:/Users/kumi/Desktop/coursera file/LungCapData/LungCapData.txt")
View(LungCapData)
LungCapData <- read.delim("C:/Users/kumi/Desktop/coursera file/LungCapData/LungCapData.txt")
View(LungCapData)
catHeight <-cut(Height,break=c(0,50,55,60,65,70,100))
catHeight <-cut(Height,breaks=c(0,50,55,60,65,70,100))
attach(LungCapData)
catHeight <-cut(Height,breaks=c(0,50,55,60,65,70,100))
catHeight <-cut(Height,breaks=c(0,50,55,60,65,70,100),labels=c("A","B","c","D","E","F"))
Height[1:10]
catHeight[1:10]
boxplot(LungCap~Height,col="yellow")
LungCapData <-mytate(catHeight=cut(Height,breaks(c(0,50,55,60,65,70,100))))
LungCapData <-mutate(catHeight=cut(Height,breaks(c(0,50,55,60,65,70,100))))
boxplot(LungCap,col=catHeight,col="yellow")
library(maacs)
find.package("devtools")
install.packages("devtools")
library(devtools)
find-rtools()
find-Rtools()
find_rtools()
add2 <-function(x,y){
x + y
}
add2(3,5)
above10 <-function(x){
use <-x>10
x[use]
}
x <-1:10
x
x <-1:20
x[use]
x
install.packages("data.table")
library(data.table)
pollutantmean <-function(directory,pollutant,id=1:332){
fileNames <-paste0(directory,'/',flag="0"),".csv")
install.packages("knitr")
save.image("C:/Users/kumi/Desktop/HelloWorld.md.RData")
install.packages("data.table")
TRUE
library(data.table)
outcome <-read.table("outcome-of-care-measures.csv")
getwd()
Rhome()
R.home()
library(Rtools)
install.packages("Rtools")
q("yes")
restart()
q()
install.packages("devtools")
install.packages("xtable")
library(xtable)
download.file(fileUrl, destfile = paste0("/Users/kumi/Desktop", '/repdata%2Fdata%2FStormData.csv.bz2'))
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(fileUrl, destfile = paste0("/Users/kumi/Desktop", '/repdata%2Fdata%2FStormData.csv.bz2'))
stormDF <- read.csv("/Users/kumi/Desktop/repdata%2Fdata%2FStormData.csv.bz2")
getwd()
#Read csv data
path <-getwd()
stormDF <- read.csv("/Users/kumi/Desktop/repdata%2Fdata%2FStormData.csv.bz2")
install.packages("manipulate")
library(UsingR)
library(manipulate)
library(ggplot2)
data(galton)
myHist <-function(mu){
mse <-mean((galton$child-mu)^2)
g <-ggplot(galton,aes(child))+geom_histogram(fill="salmon",color="black",binwidth=1)
g <-g + geom_vline(xintercept=mu,size=3)
g <-g + ggtitle(paste("mu=",mu,",MSE=",round(mse,2),sep=""))
}
manipulate(myHist(mu),mu=slider(62,74,step=0.5))
library(UsingR)
data(galton)
library(manipulate)
myHist <-function(mu){}
install.packages("manipulate")
library(UsingR)
library(manipulate)
library(ggplot2)
data(galton)
myHist <-function(mu){
mse <-mean((galton$child-mu)^2)
g <-ggplot(galton,aes(child))+geom_histogram(fill="salmon",color="black",binwidth=1)
g <-g + geom_vline(xintercept=mu,size=3)
g <-g + ggtitle(paste("mu=",mu,",MSE=",round(mse,2),sep=""))
}
manipulate(myHist(mu),mu=slider(62,74,step=0.5))
library(UsingR)
library(manipulate)
library(ggplot2)
data(galton)
myHist <-function(mu){
mse <-mean((galton$child-mu)^2)
g <-ggplot(galton,aes(child))+geom_histogram(fill="salmon",color="black",binwidth=1)
g <-g + geom_vline(xintercept=mu,size=3)
g <-g + ggtitle(paste("mu=",mu,",MSE=",round(mse,2),sep=""))
}
manipulate(myHist(mu),mu=slider(62,74,step=0.5))
library(UsingR)
library(manipulate)
library(ggplot2)
data(galton)
myHist <-function(mu){
mse <-mean((galton$child-mu)^2)
g <-ggplot(galton,aes(child))+geom_histogram(fill="salmon",color="black",binwidth=1)
g <-g + geom_vline(xintercept=mu,size=3)
g <-g + ggtitle(paste("mu=",mu,",MSE=",round(mse,2),sep=""))
}
manipulate(myHist(mu),mu=slider(62,74,step=0.5))
library(UsingR)
library(manipulate)
library(ggplot2)
data(galton)
myHist <-function(mu){
mse <-mean((galton$child-mu)^2)
g <-ggplot(galton,aes(child))+geom_histogram(fill="salmon",color="black",binwidth=1)
g <-g + geom_vline(xintercept=mu,size=3)
g <-g + ggtitle(paste("mu=",mu,",MSE=",round(mse,2),sep=""))
}
manipulate(myHist(mu),mu=slider(62,74,step=0.5))
{r scatterplot,echo=TRUE}
library(UsingR)
data(diamond)
library(ggplot2)
g1 <-ggplot(diamond,aes(x=carat,y=price))
g2 <-labs(x="Mass(carat)",y="Price(SIN)")+labs(title="Scatterplot of Price and Carat")
{r ,echo=TRUE
{r echo=TRUE}
library(UsingR)
library(UsingR)
data(diamond)
library(ggplot2)
g1 <-ggplot(diamond,aes(x=carat,y=price))
g2 <-labs(x="Mass(carat)",y="Price(SIN)")
g3 <-geom_point(size=6,color="black",alpha=0.2)
g4 <-geom_point(size=5,color="blue",alpha=0.2)
g5 <-geom_smooth(method="lm",color="red")
g <-g1+g2+g3+g4+g5
g
library(UsingR)
data(diamond)
library(ggplot2)
g1 <-ggplot(diamond,aes(x=carat,y=price))
g2 <-labs(x="Mass(carat)",y="Price(SIN)")+ggtitle("Scatterplot of Price and Carat")
library(UsingR)
data(diamond)
library(ggplot2)
g1 <-ggplot(diamond,aes(x=carat,y=price))
g2 <-labs(x="Mass(carat)",y="Price(SIN)")+labs(ggtitle="Scatterplot of Price and Carat")
library(UsingR)
data(diamond)
library(ggplot2)
g1 <-ggplot(diamond,aes(x=carat,y=price))
g2 <-labs(x="Mass(carat)",y="Price(SIN)")
g3 <-geom_point(size=6,color="black",alpha=0.2)
g4 <-geom_point(size=5,color="blue",alpha=0.2)
g5 <-geom_smooth(method="lm",color="red")
g <-g1+g2+g3+g4+g5
g
install.packages("GGally")
("https:download.file//dl.dropboxusercontent.com/u/7710864/data/ravensData.rda",destfile="./data/ravensData.rda")
("https:download.file//dl.dropboxusercontent.com/u/7710864/data/ravensData.rda"destfile="./data/ravensData.rda")
fileUrl <-"https://dl.dropboxusercontent.com/u/7710864/data/ravensData.rda",destfile="./data/ravensData.rda"
fileUrl <-"https://dl.dropboxusercontent.com/u/7710864/data/ravensData.rda"
download.file(fileUrl,destfile = paste0("/Users/kumi/Desktop","/ravensData.rda")
)
download.file(fileUrl,destfile = paste0("/Users/kumi/Desktop","/data/ravensData.rda")
)
download.file(fileUrl,destfile = paste0("/Users/kumi/Desktop","/7710864/data/ravensData.rda"))
install.packages("rattle",dependenccies=c("Depends","Suggests"))
install.packages("GTK+")
library(ElemStatLearn)
data(prostate)
library(lars)
library(dplyr)
library(caret)
library(ggplot2)
y <-prostate$lpsa
x <-select(prostate,-(lpsa))
x
names(x)
lasso.fit <-lars(as.matrix(x),y,type="lasso",trace=TRUE)
plot(lasso.fit,breaks=FALSE,cex=0.75)
lasso.cv <-cv.lars(as.matrix(x),y,K=10,type="lasso",trace=TRUE)
inTrain <-createDataPartition(y=prostate$lpsa,p=0.7,list=FALSE)
training <-prostate[inTrain,]
testing <-prostate[-inTrain,]
modFit <-train(lpsa~.,data=training,method="lasso")
finMod <-modFit$finalModel
finMod
predmodFit <-predict(modFit,testing)
predmodFit
q()
fileUrl <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
download.file(fileUrl,detfile=paste0("/Users/kumi/Desktop",'pml-training.csv'))
download.file(fileUrl,destfile=paste0("/Users/kumi/Desktop",'pml-training.csv'))
fileUrl <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
download.file(fileUrl,destfile=paste0("/Users/kumi/Desktop",'pml-training.csv'))
fileUrl <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
download.file(fileUrl,destfile=paste0("/Users/kumi/Desktop/PractMachLearnProject",'pml-training.csv'))
install.packages("Rtools")
install.packages("shiny")
shiny::runApp('C:/Users/kumi/Desktop/DevDataProducts/myApp1')
shiny::runApp('C:/Users/kumi/Desktop/DevDataProducts/myApp2')
runApp()
runGadget()
runGadget(ui,server)
shiny::runApp('C:/Users/kumi/Desktop/DevDataProducts/myApp10')
runApp('C:/Users/kumi/Desktop/DevDataProducts/myApp10')
runApp('C:/Users/kumi/Desktop/DevDataProducts/myApp10')
runApp('C:/Users/kumi/Desktop/DevDataProducts/myApp10')
runApp('C:/Users/kumi/Desktop/DevDataProducts/myApp10')
runApp('C:/Users/kumi/Desktop/DevDataProducts/myApp10')
runApp('C:/Users/kumi/Desktop/DevDataProducts/myApp10')
install.packages("googleVis")
install.packages("plotly")
library(plotly)
plotly_POST(g)
library(plotly)
plotly_POST(p)
shiny::runApp('C:/Users/kumi/Desktop/DevDataProducts/Test1')
install.packages("leaflet")
library(leaflet)
``` {r,eval=FALSE}
``` {r,echo=FALSE}
``` {r}
shiny::runApp('C:/Users/kumi/Desktop/DevDataProd-FinalProject1/testApp1')
runApp('C:/Users/kumi/Desktop/DevDataProd-FinalProject1/testApp1')
runApp('C:/Users/kumi/Desktop/DevDataProd-FinalProject1/testApp1')
runApp('C:/Users/kumi/Desktop/DevDataProd-FinalProject1/testApp1')
runApp('C:/Users/kumi/Desktop/DevDataProd-FinalProject1/testApp1')
runApp('C:/Users/kumi/Desktop/DevDataProd-FinalProject1/testApp1')
runApp('C:/Users/kumi/Desktop/DevDataProd-FinalProject1/testApp1')
runApp('C:/Users/kumi/Desktop/DevDataProd-FinalProject1/testApp1')
runApp('C:/Users/kumi/Desktop/DevDataProd-FinalProject1/testApp1')
runApp('C:/Users/kumi/Desktop/DevDataProd-FinalProject1/testApp1')
runApp('C:/Users/kumi/Desktop/DevDataProd-FinalProject1/testApp1')
runApp('C:/Users/kumi/Desktop/DevDataProd-FinalProject1/testApp1')
runApp('C:/Users/kumi/Desktop/DevDataProd-FinalProject1/testApp1')
runApp('C:/Users/kumi/Desktop/DevDataProd-FinalProject1/testApp1')
runApp('C:/Users/kumi/Desktop/DevDataProd-FinalProject1/testApp1')
runApp('C:/Users/kumi/Desktop/DevDataProd-FinalProject1/testApp1')
runApp('C:/Users/kumi/Desktop/DevDataProd-FinalProject1/testApp1')
runApp('C:/Users/kumi/Desktop/DevDataProd-FinalProject1/testApp1')
runApp('C:/Users/kumi/Desktop/DevDataProd-FinalProject1/testApp1')
runApp('C:/Users/kumi/Desktop/DevDataProd-FinalProject1/testApp1')
runApp('C:/Users/kumi/Desktop/DevDataProd-FinalProject1/testApp1')
runApp('C:/Users/kumi/Desktop/DevDataProd-FinalProject1/testApp1')
runApp('C:/Users/kumi/Desktop/DevDataProd-FinalProject1/testApp1')
runApp('C:/Users/kumi/Desktop/DevDataProd-FinalProject1/testApp1')
runApp('C:/Users/kumi/Desktop/DevDataProd-FinalProject1/testApp1')
runApp('C:/Users/kumi/Desktop/DevDataProd-FinalProject1/testApp1')
runApp('C:/Users/kumi/Desktop/DevDataProd-FinalProject1/testApp1')
shiny::runApp('C:/Users/kumi/Desktop/kumi-DDPProject/ShinyApp-FinalProject')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("devtools")
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
